document.addEventListener('DOMContentLoaded', () => {

    // == 1. –ö–û–ù–°–¢–ê–ù–¢–ò, –ó–ú–Ü–ù–ù–Ü –Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==
    const BASE_FARE = 40;
    const PRICE_PER_KM = 15;
    const PAYMENT_OPTIONS = ['–ì–æ—Ç—ñ–≤–∫–∞', '–ö–∞—Ä—Ç–∫–∞'];
    let rideState = 'idle';

    // == 2. –ó–ë–ò–†–ê–Ñ–ú–û –í–°–Ü –ü–û–¢–†–Ü–ë–ù–Ü –ï–õ–ï–ú–ï–ù–¢–ò ==
    const screens = document.querySelectorAll('.screen');
    const backButtons = document.querySelectorAll('.btn-back');
    const showDriverLoginBtn = document.getElementById('show-driver-login');
    const showPassengerLoginBtn = document.getElementById('show-passenger-login');
    const driverTelegramLoginBtn = document.querySelector('#login-screen-driver .btn-telegram-login');
    const passengerTelegramLoginBtn = document.querySelector('#login-screen-passenger .btn-telegram-login');
    
    // –ï–ª–µ–º–µ–Ω—Ç–∏ –ø–∞—Å–∞–∂–∏—Ä–∞
    const showMyOrdersBtn = document.getElementById('show-my-orders-btn');
    const findDriverBtn = document.getElementById('find-driver-btn');
    const showQuickOrderBtn = document.getElementById('show-quick-order-btn');
    const quickOrderForm = document.getElementById('quick-order-form');
    const showHelpBtn = document.getElementById('show-help-btn');

    // –ï–ª–µ–º–µ–Ω—Ç–∏ –≤–æ–¥—ñ—è
    const showFindPassengersBtn = document.getElementById('show-find-passengers-btn');
    const acceptOrderBtn = document.getElementById('accept-order-btn');
    const tripDistanceEl = document.getElementById('trip-distance');
    const tripFareEl = document.getElementById('trip-fare');
    const paymentMethodEl = document.getElementById('payment-method');
    const cancelRideBtn = document.getElementById('cancel-ride-btn');
    const rideActionBtn = document.getElementById('ride-action-btn');
    const rideStatusHeader = document.getElementById('ride-status-header');
    const rideMapPlaceholder = document.getElementById('ride-map-placeholder').querySelector('p');
    const rideAddressDetails = document.getElementById('ride-address-details');

    // == 3. –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ù–ê–í–Ü–ì–ê–¶–Ü–á ==
    function showScreen(screenId) {
        screens.forEach(screen => { screen.classList.add('hidden'); screen.classList.remove('active'); });
        const activeScreen = document.getElementById(screenId);
        if (activeScreen) { activeScreen.classList.remove('hidden'); activeScreen.classList.add('active'); }
    }

    // == 4. –ù–ê–í–Ü–®–£–Ñ–ú–û –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô (–ö–õ–Ü–ö–ò) ==
    showDriverLoginBtn.addEventListener('click', () => showScreen('login-screen-driver'));
    showPassengerLoginBtn.addEventListener('click', () => showScreen('login-screen-passenger'));
    backButtons.forEach(button => button.addEventListener('click', () => showScreen(button.dataset.target || 'home-screen')));
    driverTelegramLoginBtn.addEventListener('click', () => showScreen('driver-dashboard'));
    passengerTelegramLoginBtn.addEventListener('click', () => showScreen('passenger-dashboard'));
    
    // –õ–û–ì–Ü–ö–ê –ü–ê–°–ê–ñ–ò–†–ê
    showMyOrdersBtn.addEventListener('click', () => {
        updatePassengerOrderCardListeners(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
        showScreen('passenger-orders-screen');
    });
    findDriverBtn.addEventListener('click', () => showScreen('passenger-find-driver-screen'));
    showQuickOrderBtn.addEventListener('click', () => showScreen('quick-order-screen'));
    showHelpBtn.addEventListener('click', () => showScreen('help-screen'));
    quickOrderForm.addEventListener('submit', (e) => { e.preventDefault(); alert('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!'); showScreen('passenger-dashboard'); quickOrderForm.reset(); });

    // –õ–û–ì–Ü–ö–ê –í–û–î–Ü–Ø
    showFindPassengersBtn.addEventListener('click', () => { updateDriverOrderCardListeners(); showScreen('driver-find-passengers-screen'); });
    acceptOrderBtn.addEventListener('click', () => { setupActiveRide(); showScreen('driver-active-ride-screen'); });
    cancelRideBtn.addEventListener('click', () => { if (confirm('–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É? –¶–µ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.')) { rideState = 'idle'; showScreen('driver-dashboard'); } });
    rideActionBtn.addEventListener('click', handleRideAction);
    
    // == 5. –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ==
    function updateDriverOrderCardListeners() {
        document.querySelectorAll('#driver-find-passengers-screen .order-card').forEach(card => card.addEventListener('click', () => { calculateAndDisplayTripDetails(); showScreen('driver-order-details-screen'); }));
    }

    // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –∫–ª—ñ–∫—ñ–≤ –ø–æ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ—ó–∑–¥–æ–∫ –ø–∞—Å–∞–∂–∏—Ä–∞
    function updatePassengerOrderCardListeners() {
        document.querySelectorAll('#passenger-orders-screen .order-card').forEach(card => card.addEventListener('click', () => {
            // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—å —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–æ—ó–∑–¥–∫–∏
            // –ê –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –µ–∫—Ä–∞–Ω –¥–µ—Ç–∞–ª–µ–π
            showScreen('passenger-order-details-screen');
        }));
    }

    function calculateAndDisplayTripDetails() {
        const distance = (Math.random() * (10 - 1.5) + 1.5).toFixed(1);
        const fare = Math.round(BASE_FARE + (distance * PRICE_PER_KM));
        const paymentMethod = PAYMENT_OPTIONS[Math.floor(Math.random() * PAYMENT_OPTIONS.length)];
        tripDistanceEl.textContent = `~ ${distance} –∫–º`;
        tripFareEl.textContent = `~ ${fare} –≥—Ä–Ω`;
        paymentMethodEl.textContent = paymentMethod;
    }
    function setupActiveRide() {
        rideState = 'driving_to_client';
        updateRideScreenUI();
    }
    function handleRideAction() {
        switch (rideState) {
            case 'driving_to_client': alert('–ü–∞—Å–∞–∂–∏—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ –≤–∏ –Ω–∞ –º—ñ—Å—Ü—ñ!'); rideState = 'waiting_for_client'; break;
            case 'waiting_for_client': rideState = 'in_progress'; break;
            case 'in_progress': alert('–ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'); rideState = 'idle'; showScreen('driver-dashboard'); break;
        }
        updateRideScreenUI();
    }
    function updateRideScreenUI() {
        rideActionBtn.classList.remove('start-ride', 'end-ride');
        switch (rideState) {
            case 'driving_to_client': rideStatusHeader.textContent = '–ü–æ—ó–∑–¥–∫–∞ –¥–æ –ø–∞—Å–∞–∂–∏—Ä–∞'; rideMapPlaceholder.textContent = '–á–¥—å—Ç–µ –¥–æ –ø–∞—Å–∞–∂–∏—Ä–∞'; rideAddressDetails.innerHTML = '<span><strong>–ê–¥—Ä–µ—Å–∞:</strong> –≤—É–ª. –í–µ—Å–Ω—è–Ω–∞, 15</span>'; rideActionBtn.innerHTML = '‚úÖ –Ø –Ω–∞ –º—ñ—Å—Ü—ñ'; break;
            case 'waiting_for_client': rideStatusHeader.textContent = '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Å–∞–∂–∏—Ä–∞'; rideActionBtn.innerHTML = 'üöÄ –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É'; rideActionBtn.classList.add('start-ride'); break;
            case 'in_progress': rideStatusHeader.textContent = '–í –¥–æ—Ä–æ–∑—ñ'; rideMapPlaceholder.textContent = '–á–¥—å—Ç–µ –¥–æ —Ç–æ—á–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è'; rideAddressDetails.innerHTML = '<span><strong>–ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</strong> –≤—É–ª. –ú—É–∑–µ–π–Ω–∞, 4</span>'; rideActionBtn.innerHTML = 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É'; rideActionBtn.classList.add('end-ride'); break;
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    showScreen('home-screen');
});
