document.addEventListener('DOMContentLoaded', () => {

    // == 1. –ö–û–ù–°–¢–ê–ù–¢–ò, –ó–ú–Ü–ù–ù–Ü –Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==
    const BASE_FARE = 40;
    const PRICE_PER_KM = 15;
    const PAYMENT_OPTIONS = ['–ì–æ—Ç—ñ–≤–∫–∞', '–ö–∞—Ä—Ç–∫–∞'];
    const DRIVER_CAR_COLOR = '#ffffff';
    let rideState = 'idle';
    let progressInterval = null;

    // –¢–∞–π–º–µ—Ä–∏ —Ç–∞ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –ø–∞—Å–∞–∂–∏—Ä–∞
    let driverArrived = false;
    let statusTimer = 0;
    let activeOrderInterval = null;
    let etaInterval = null;
    let carAnimationInterval = null;

    // == 2. –ó–ë–ò–†–ê–Ñ–ú–û –í–°–Ü –ü–û–¢–†–Ü–ë–ù–Ü –ï–õ–ï–ú–ï–ù–¢–ò ==
    const screens = document.querySelectorAll('.screen');
    const backButtons = document.querySelectorAll('.btn-back');
    const showDriverLoginBtn = document.getElementById('show-driver-login');
    const showPassengerLoginBtn = document.getElementById('show-passenger-login');
    const driverTelegramLoginBtn = document.querySelector('#login-screen-driver .btn-telegram-login');
    const passengerTelegramLoginBtn = document.querySelector('#login-screen-passenger .btn-telegram-login');
    // –ï–ª–µ–º–µ–Ω—Ç–∏ –ø–∞—Å–∞–∂–∏—Ä–∞
    const showMyOrdersBtn = document.getElementById('show-my-orders-btn');
    const findDriverBtn = document.getElementById('find-driver-btn');
    const showQuickOrderBtn = document.getElementById('show-quick-order-btn');
    const quickOrderForm = document.getElementById('quick-order-form');
    const showHelpBtn = document.getElementById('show-help-btn');
    const carProgressIcon = document.getElementById('car-progress-icon');
    const passengerCancelRideBtn = document.getElementById('passenger-cancel-ride-btn');
    // –ï–ª–µ–º–µ–Ω—Ç–∏ –≤–æ–¥—ñ—è
    const showDriverOrdersBtn = document.getElementById('show-driver-orders-btn');
    const showFindPassengersBtn = document.getElementById('show-find-passengers-btn');
    const acceptOrderBtn = document.getElementById('accept-order-btn');
    const tripDistanceEl = document.getElementById('trip-distance');
    const tripFareEl = document.getElementById('trip-fare');
    const paymentMethodEl = document.getElementById('payment-method');
    const cancelRideBtn = document.getElementById('cancel-ride-btn');
    const rideActionBtn = document.getElementById('ride-action-btn');
    const rideStatusHeader = document.getElementById('ride-status-header');
    const rideMapPlaceholder = document.getElementById('ride-map-placeholder')?.querySelector('p');
    const rideAddressDetails = document.getElementById('ride-address-details');

    // == 3. –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ù–ê–í–Ü–ì–ê–¶–Ü–á ==
    function showScreen(screenId) {
        if (progressInterval) {
            clearInterval(progressInterval);
            progressInterval = null;
        }
        screens.forEach(screen => { screen.classList.add('hidden'); screen.classList.remove('active'); });
        const activeScreen = document.getElementById(screenId);
        if (activeScreen) { activeScreen.classList.remove('hidden'); activeScreen.classList.add('active'); }
    }

    // == 4. –ù–ê–í–Ü–®–£–Ñ–ú–û –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô (–ö–õ–Ü–ö–ò) ==
    showDriverLoginBtn?.addEventListener('click', () => showScreen('login-screen-driver'));
    showPassengerLoginBtn?.addEventListener('click', () => showScreen('login-screen-passenger'));
    backButtons.forEach(button => button.addEventListener('click', () => showScreen(button.dataset.target || 'home-screen')));
    driverTelegramLoginBtn?.addEventListener('click', () => showScreen('driver-dashboard'));
    passengerTelegramLoginBtn?.addEventListener('click', () => showScreen('passenger-dashboard'));

    // ========== –õ–û–ì–Ü–ö–ê –ü–ê–°–ê–ñ–ò–†–ê ==========
showMyOrdersBtn?.addEventListener('click', () => {
    showScreen('passenger-orders-screen');
    runActiveTripSimulation(); 
});


    findDriverBtn?.addEventListener('click', () => showScreen('passenger-find-driver-screen'));
    showQuickOrderBtn?.addEventListener('click', () => showScreen('quick-order-screen'));
    showHelpBtn?.addEventListener('click', () => showScreen('help-screen'));
    quickOrderForm?.addEventListener('submit', (e) => {
        e.preventDefault();
        alert('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
        showScreen('passenger-dashboard');
        quickOrderForm.reset();
    });
    passengerCancelRideBtn?.addEventListener('click', () => {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É?')) {
            alert('–ü–æ—ó–∑–¥–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
            showScreen('passenger-dashboard');
        }
    });

    // ========== –õ–û–ì–Ü–ö–ê –í–û–î–Ü–Ø ==========
    showDriverOrdersBtn?.addEventListener('click', () => alert('–¶–µ–π –µ–∫—Ä–∞–Ω —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ :)'));
    showFindPassengersBtn?.addEventListener('click', () => { updateDriverOrderCardListeners(); showScreen('driver-find-passengers-screen'); });
    acceptOrderBtn?.addEventListener('click', () => { setupActiveRide(); showScreen('driver-active-ride-screen'); });
    cancelRideBtn?.addEventListener('click', () => { if (confirm('–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É? –¶–µ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.')) { rideState = 'idle'; showScreen('driver-dashboard'); } });
    rideActionBtn?.addEventListener('click', handleRideAction);

    // == 5. –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ==
    function updateDriverOrderCardListeners() {
        document.querySelectorAll('#driver-find-passengers-screen .order-card').forEach(card => {
            card.addEventListener('click', () => {
                calculateAndDisplayTripDetails();
                showScreen('driver-order-details-screen');
            });
        });
    }

    function updatePassengerOrderCardListeners() {
        document.querySelectorAll('#passenger-orders-screen .order-card .details-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                showScreen('passenger-order-details-screen');
            });
        });
        document.querySelectorAll('#passenger-orders-screen .order-card').forEach(card => {
            card.addEventListener('click', (e) => {
                // –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –ø–æ details-btn, –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏
                if (e.target.closest('.details-btn')) return;
                showScreen('passenger-order-details-screen');
            });
        });
    }

    function calculateAndDisplayTripDetails() {
        if (!tripDistanceEl || !tripFareEl || !paymentMethodEl) return;
        const distance = (Math.random() * (10 - 1.5) + 1.5).toFixed(1);
        const fare = Math.round(BASE_FARE + (distance * PRICE_PER_KM));
        const paymentMethod = PAYMENT_OPTIONS[Math.floor(Math.random() * PAYMENT_OPTIONS.length)];
        tripDistanceEl.textContent = `~ ${distance} –∫–º`;
        tripFareEl.textContent = `~ ${fare} –≥—Ä–Ω`;
        paymentMethodEl.textContent = paymentMethod;
    }

    function setupActiveRide() {
        rideState = 'driving_to_client';
        updateRideScreenUI();
    }

    function handleRideAction() {
        switch (rideState) {
            case 'driving_to_client':
                alert('–ü–∞—Å–∞–∂–∏—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ –≤–∏ –Ω–∞ –º—ñ—Å—Ü—ñ!');
                rideState = 'waiting_for_client';
                break;
            case 'waiting_for_client':
                rideState = 'in_progress';
                break;
            case 'in_progress':
                alert('–ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
                rideState = 'idle';
                showScreen('driver-dashboard');
                break;
        }
        updateRideScreenUI();
    }

    function updateRideScreenUI() {
        if (!rideActionBtn) return;
        rideActionBtn.classList.remove('start-ride', 'end-ride');
        switch (rideState) {
            case 'driving_to_client':
                rideStatusHeader.textContent = '–ü–æ—ó–∑–¥–∫–∞ –¥–æ –ø–∞—Å–∞–∂–∏—Ä–∞';
                if (rideMapPlaceholder) rideMapPlaceholder.textContent = '–á–¥—å—Ç–µ –¥–æ –ø–∞—Å–∞–∂–∏—Ä–∞';
                if (rideAddressDetails) rideAddressDetails.innerHTML = '<span><strong>–ê–¥—Ä–µ—Å–∞:</strong> –≤—É–ª. –í–µ—Å–Ω—è–Ω–∞, 15</span>';
                rideActionBtn.innerHTML = '‚úÖ –Ø –Ω–∞ –º—ñ—Å—Ü—ñ';
                break;
            case 'waiting_for_client':
                rideStatusHeader.textContent = '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Å–∞–∂–∏—Ä–∞';
                rideActionBtn.innerHTML = 'üöÄ –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É';
                rideActionBtn.classList.add('start-ride');
                break;
            case 'in_progress':
                rideStatusHeader.textContent = '–í –¥–æ—Ä–æ–∑—ñ';
                if (rideMapPlaceholder) rideMapPlaceholder.textContent = '–á–¥—å—Ç–µ –¥–æ —Ç–æ—á–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è';
                if (rideAddressDetails) rideAddressDetails.innerHTML = '<span><strong>–ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</strong> –≤—É–ª. –ú—É–∑–µ–π–Ω–∞, 4</span>';
                rideActionBtn.innerHTML = 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É';
                rideActionBtn.classList.add('end-ride');
                break;
        }
    }
    
    // === –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –°–ò–ú–£–õ–Ø–¶–Ü–á (–≤–µ—Ä—Å—ñ—è –¥–ª—è –Ω–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏) ===
function runActiveTripSimulation() {
    // –ó—É–ø–∏–Ω—è—î–º–æ –±—É–¥—å-—è–∫—ñ —Å—Ç–∞—Ä—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if (window.tripInterval) clearInterval(window.tripInterval);

    // --- 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –Ω–∞—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—Ü—ñ ---
    const activeCard = document.querySelector('.order-card.active');
    if (!activeCard) return; // –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

    const statusIcon = activeCard.querySelector('#status-icon');
    const statusText = activeCard.querySelector('#status-text');
    const carIcon = activeCard.querySelector('#car-icon');
    const dotsContainer = activeCard.querySelector('.dots-container');
    const endPoint = activeCard.querySelector('#progress-end-point');

    // --- 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó ---
    const totalDurationSeconds = 15; // –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const totalDots = 18; // –°–∫—ñ–ª—å–∫–∏ –∫—Ä–∞–ø–æ–∫-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ —à–ª—è—Ö—É
    let progress = 0; // –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥ 0 –¥–æ 100

    // --- 3. –°–∫–∏–¥–∞—î–º–æ –≤—Å–µ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É ---
    statusIcon.className = 'fa-solid fa-spinner fa-spin';
    statusText.textContent = '–í–æ–¥—ñ–π –ø—Ä—è–º—É—î –¥–æ –≤–∞—Å';
    endPoint.classList.remove('arrived');
    endPoint.className = 'fa-solid fa-circle-dot progress-end-point';
    carIcon.style.left = '0%';
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—Ä–∞–ø–∫–∏
    dotsContainer.innerHTML = '';
    for (let i = 0; i < totalDots; i++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        dotsContainer.appendChild(dot);
    }
    const allDots = dotsContainer.querySelectorAll('.dot');

    // --- 4. –ó–∞–ø—É—Å–∫–∞—î–º–æ "–¥–≤–∏–≥—É–Ω" –∞–Ω—ñ–º–∞—Ü—ñ—ó ---
    // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –∫–æ–∂–Ω—ñ –ø—ñ–≤—Å–µ–∫—É–Ω–¥–∏
    window.tripInterval = setInterval(() => {
        progress += (100 / (totalDurationSeconds * 2)); // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ, –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –ø—Ä–æ—Å—É–Ω—É—Ç–∏—Å—å –∑–∞ —Ä–∞–∑

        if (progress >= 100) {
            // --- 5. –§–Ü–ù–ê–õ: –ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---
            clearInterval(window.tripInterval); // –ó—É–ø–∏–Ω—è—î–º–æ –¥–≤–∏–≥—É–Ω
            
            carIcon.style.left = '100%';
            allDots.forEach(d => d.classList.add('passed'));
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ü—Ä–∏–±—É–≤"
            statusIcon.className = 'fa-solid fa-circle-check';
            statusIcon.classList.add('arrived');
            statusText.textContent = '–í–æ–¥—ñ–π –ø—Ä–∏–±—É–≤';
            
            // –ú—ñ–Ω—è—î–º–æ —ñ–∫–æ–Ω–∫—É –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ç–æ—á–∫–∏ –Ω–∞ "–ø—ñ–Ω"
            endPoint.classList.add('arrived');
            endPoint.className = 'fa-solid fa-location-pin progress-end-point arrived';
            return;
        }

        // --- 6. –í –î–û–†–û–ó–Ü: –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –º–∞—à–∏–Ω–∏ —ñ –∫—Ä–∞–ø–æ–∫ ---
        carIcon.style.left = `${progress}%`;
        const passedDotsCount = Math.floor(allDots.length * (progress / 100));
        allDots.forEach((dot, index) => {
            if (index < passedDotsCount) {
                dot.classList.add('passed');
            } else {
                dot.classList.remove('passed');
            }
        });

    }, 500); // 500 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ = –ø—ñ–≤—Å–µ–∫—É–Ω–¥–∏
}

    // == –°–¢–ê–†–¢–û–í–ò–ô –ï–ö–†–ê–ù ==
    showScreen('home-screen');
});
